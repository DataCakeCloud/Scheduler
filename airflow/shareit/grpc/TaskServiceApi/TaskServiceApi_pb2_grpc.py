# -*- coding: utf-8 -*-
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import TaskServiceApi_pb2 as TaskServiceApi__pb2


class TaskRpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getTaskInfoByName = channel.unary_unary(
                '/TaskRpcService/getTaskInfoByName',
                request_serializer=TaskServiceApi__pb2.NameRequest.SerializeToString,
                response_deserializer=TaskServiceApi__pb2.Response.FromString,
                )
        self.getTaskInfoByID = channel.unary_unary(
                '/TaskRpcService/getTaskInfoByID',
                request_serializer=TaskServiceApi__pb2.IDRequest.SerializeToString,
                response_deserializer=TaskServiceApi__pb2.TaskResponse.FromString,
                )


class TaskRpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getTaskInfoByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTaskInfoByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getTaskInfoByName': grpc.unary_unary_rpc_method_handler(
                    servicer.getTaskInfoByName,
                    request_deserializer=TaskServiceApi__pb2.NameRequest.FromString,
                    response_serializer=TaskServiceApi__pb2.Response.SerializeToString,
            ),
            'getTaskInfoByID': grpc.unary_unary_rpc_method_handler(
                    servicer.getTaskInfoByID,
                    request_deserializer=TaskServiceApi__pb2.IDRequest.FromString,
                    response_serializer=TaskServiceApi__pb2.TaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TaskRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskRpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getTaskInfoByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskRpcService/getTaskInfoByName',
            TaskServiceApi__pb2.NameRequest.SerializeToString,
            TaskServiceApi__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTaskInfoByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskRpcService/getTaskInfoByID',
            TaskServiceApi__pb2.IDRequest.SerializeToString,
            TaskServiceApi__pb2.TaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
