# -*- coding: utf-8 -*-
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import TaskSchedulerApi_pb2 as TaskSchedulerApi__pb2


class TaskSchedulerRpcApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getTaskRenderInfo = channel.unary_unary(
                '/TaskSchedulerRpcApi/getTaskRenderInfo',
                request_serializer=TaskSchedulerApi__pb2.RenderRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.dateTransform = channel.unary_unary(
                '/TaskSchedulerRpcApi/dateTransform',
                request_serializer=TaskSchedulerApi__pb2.DateTransformRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.datasetInfo = channel.unary_unary(
                '/TaskSchedulerRpcApi/datasetInfo',
                request_serializer=TaskSchedulerApi__pb2.DataInfoRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.datePreview = channel.unary_unary(
                '/TaskSchedulerRpcApi/datePreview',
                request_serializer=TaskSchedulerApi__pb2.DatePreviewRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.setSuccess = channel.unary_unary(
                '/TaskSchedulerRpcApi/setSuccess',
                request_serializer=TaskSchedulerApi__pb2.StateSetRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.setFail = channel.unary_unary(
                '/TaskSchedulerRpcApi/setFail',
                request_serializer=TaskSchedulerApi__pb2.StateSetRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.clear = channel.unary_unary(
                '/TaskSchedulerRpcApi/clear',
                request_serializer=TaskSchedulerApi__pb2.ClearTaskRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.getDagRunLatest = channel.unary_unary(
                '/TaskSchedulerRpcApi/getDagRunLatest',
                request_serializer=TaskSchedulerApi__pb2.DagRunLatestRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.getTaskDiagnose = channel.unary_unary(
                '/TaskSchedulerRpcApi/getTaskDiagnose',
                request_serializer=TaskSchedulerApi__pb2.DiagnoseParamRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.taskDelete = channel.unary_unary(
                '/TaskSchedulerRpcApi/taskDelete',
                request_serializer=TaskSchedulerApi__pb2.DeleteTaskRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.taskUpdatename = channel.unary_unary(
                '/TaskSchedulerRpcApi/taskUpdatename',
                request_serializer=TaskSchedulerApi__pb2.UpdateTaskNameRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.getLogUrl = channel.unary_unary(
                '/TaskSchedulerRpcApi/getLogUrl',
                request_serializer=TaskSchedulerApi__pb2.GetLogRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.taskBackfill = channel.unary_unary(
                '/TaskSchedulerRpcApi/taskBackfill',
                request_serializer=TaskSchedulerApi__pb2.BackFillRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.progressReminder = channel.unary_unary(
                '/TaskSchedulerRpcApi/progressReminder',
                request_serializer=TaskSchedulerApi__pb2.UserActionRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.getInstanceRelation = channel.unary_unary(
                '/TaskSchedulerRpcApi/getInstanceRelation',
                request_serializer=TaskSchedulerApi__pb2.DataRelationRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.pauseTask = channel.unary_unary(
                '/TaskSchedulerRpcApi/pauseTask',
                request_serializer=TaskSchedulerApi__pb2.PausedParamRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.getLast7Status = channel.unary_unary(
                '/TaskSchedulerRpcApi/getLast7Status',
                request_serializer=TaskSchedulerApi__pb2.Last7StatusRquest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.updateTask = channel.unary_unary(
                '/TaskSchedulerRpcApi/updateTask',
                request_serializer=TaskSchedulerApi__pb2.UpdateParamRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.PageListInfo = channel.unary_unary(
                '/TaskSchedulerRpcApi/PageListInfo',
                request_serializer=TaskSchedulerApi__pb2.PageListInfoRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.updateAndExec = channel.unary_unary(
                '/TaskSchedulerRpcApi/updateAndExec',
                request_serializer=TaskSchedulerApi__pb2.UpdateAndExecRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.fastBackfill = channel.unary_unary(
                '/TaskSchedulerRpcApi/fastBackfill',
                request_serializer=TaskSchedulerApi__pb2.fastBackfillRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.batchClear = channel.unary_unary(
                '/TaskSchedulerRpcApi/batchClear',
                request_serializer=TaskSchedulerApi__pb2.BatchHandleRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.batchSetSuccess = channel.unary_unary(
                '/TaskSchedulerRpcApi/batchSetSuccess',
                request_serializer=TaskSchedulerApi__pb2.BatchHandleRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )
        self.batchSetFailed = channel.unary_unary(
                '/TaskSchedulerRpcApi/batchSetFailed',
                request_serializer=TaskSchedulerApi__pb2.BatchHandleRequest.SerializeToString,
                response_deserializer=TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
                )


class TaskSchedulerRpcApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getTaskRenderInfo(self, request, context):
        """获取render信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dateTransform(self, request, context):
        """日期转换
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def datasetInfo(self, request, context):
        """获取数据集信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def datePreview(self, request, context):
        """日期预览
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSuccess(self, request, context):
        """设置success
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setFail(self, request, context):
        """设置failed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clear(self, request, context):
        """clear
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDagRunLatest(self, request, context):
        """clear
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTaskDiagnose(self, request, context):
        """获取关联任务信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def taskDelete(self, request, context):
        """删除任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def taskUpdatename(self, request, context):
        """更新任务名称
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLogUrl(self, request, context):
        """获取日志url
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def taskBackfill(self, request, context):
        """补数
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def progressReminder(self, request, context):
        """补数行为记录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getInstanceRelation(self, request, context):
        """获取实例血缘
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pauseTask(self, request, context):
        """停止任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLast7Status(self, request, context):
        """获取last7状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTask(self, request, context):
        """更新任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PageListInfo(self, request, context):
        """page
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateAndExec(self, request, context):
        """更新并执行任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fastBackfill(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batchClear(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batchSetSuccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batchSetFailed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskSchedulerRpcApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getTaskRenderInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getTaskRenderInfo,
                    request_deserializer=TaskSchedulerApi__pb2.RenderRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'dateTransform': grpc.unary_unary_rpc_method_handler(
                    servicer.dateTransform,
                    request_deserializer=TaskSchedulerApi__pb2.DateTransformRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'datasetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.datasetInfo,
                    request_deserializer=TaskSchedulerApi__pb2.DataInfoRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'datePreview': grpc.unary_unary_rpc_method_handler(
                    servicer.datePreview,
                    request_deserializer=TaskSchedulerApi__pb2.DatePreviewRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'setSuccess': grpc.unary_unary_rpc_method_handler(
                    servicer.setSuccess,
                    request_deserializer=TaskSchedulerApi__pb2.StateSetRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'setFail': grpc.unary_unary_rpc_method_handler(
                    servicer.setFail,
                    request_deserializer=TaskSchedulerApi__pb2.StateSetRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'clear': grpc.unary_unary_rpc_method_handler(
                    servicer.clear,
                    request_deserializer=TaskSchedulerApi__pb2.ClearTaskRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'getDagRunLatest': grpc.unary_unary_rpc_method_handler(
                    servicer.getDagRunLatest,
                    request_deserializer=TaskSchedulerApi__pb2.DagRunLatestRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'getTaskDiagnose': grpc.unary_unary_rpc_method_handler(
                    servicer.getTaskDiagnose,
                    request_deserializer=TaskSchedulerApi__pb2.DiagnoseParamRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'taskDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.taskDelete,
                    request_deserializer=TaskSchedulerApi__pb2.DeleteTaskRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'taskUpdatename': grpc.unary_unary_rpc_method_handler(
                    servicer.taskUpdatename,
                    request_deserializer=TaskSchedulerApi__pb2.UpdateTaskNameRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'getLogUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.getLogUrl,
                    request_deserializer=TaskSchedulerApi__pb2.GetLogRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'taskBackfill': grpc.unary_unary_rpc_method_handler(
                    servicer.taskBackfill,
                    request_deserializer=TaskSchedulerApi__pb2.BackFillRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'progressReminder': grpc.unary_unary_rpc_method_handler(
                    servicer.progressReminder,
                    request_deserializer=TaskSchedulerApi__pb2.UserActionRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'getInstanceRelation': grpc.unary_unary_rpc_method_handler(
                    servicer.getInstanceRelation,
                    request_deserializer=TaskSchedulerApi__pb2.DataRelationRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'pauseTask': grpc.unary_unary_rpc_method_handler(
                    servicer.pauseTask,
                    request_deserializer=TaskSchedulerApi__pb2.PausedParamRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'getLast7Status': grpc.unary_unary_rpc_method_handler(
                    servicer.getLast7Status,
                    request_deserializer=TaskSchedulerApi__pb2.Last7StatusRquest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'updateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTask,
                    request_deserializer=TaskSchedulerApi__pb2.UpdateParamRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'PageListInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.PageListInfo,
                    request_deserializer=TaskSchedulerApi__pb2.PageListInfoRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'updateAndExec': grpc.unary_unary_rpc_method_handler(
                    servicer.updateAndExec,
                    request_deserializer=TaskSchedulerApi__pb2.UpdateAndExecRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'fastBackfill': grpc.unary_unary_rpc_method_handler(
                    servicer.fastBackfill,
                    request_deserializer=TaskSchedulerApi__pb2.fastBackfillRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'batchClear': grpc.unary_unary_rpc_method_handler(
                    servicer.batchClear,
                    request_deserializer=TaskSchedulerApi__pb2.BatchHandleRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'batchSetSuccess': grpc.unary_unary_rpc_method_handler(
                    servicer.batchSetSuccess,
                    request_deserializer=TaskSchedulerApi__pb2.BatchHandleRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
            'batchSetFailed': grpc.unary_unary_rpc_method_handler(
                    servicer.batchSetFailed,
                    request_deserializer=TaskSchedulerApi__pb2.BatchHandleRequest.FromString,
                    response_serializer=TaskSchedulerApi__pb2.TaskCommonResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TaskSchedulerRpcApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskSchedulerRpcApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getTaskRenderInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/getTaskRenderInfo',
            TaskSchedulerApi__pb2.RenderRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dateTransform(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/dateTransform',
            TaskSchedulerApi__pb2.DateTransformRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def datasetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/datasetInfo',
            TaskSchedulerApi__pb2.DataInfoRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def datePreview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/datePreview',
            TaskSchedulerApi__pb2.DatePreviewRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setSuccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/setSuccess',
            TaskSchedulerApi__pb2.StateSetRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setFail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/setFail',
            TaskSchedulerApi__pb2.StateSetRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def clear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/clear',
            TaskSchedulerApi__pb2.ClearTaskRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDagRunLatest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/getDagRunLatest',
            TaskSchedulerApi__pb2.DagRunLatestRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTaskDiagnose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/getTaskDiagnose',
            TaskSchedulerApi__pb2.DiagnoseParamRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def taskDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/taskDelete',
            TaskSchedulerApi__pb2.DeleteTaskRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def taskUpdatename(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/taskUpdatename',
            TaskSchedulerApi__pb2.UpdateTaskNameRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLogUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/getLogUrl',
            TaskSchedulerApi__pb2.GetLogRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def taskBackfill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/taskBackfill',
            TaskSchedulerApi__pb2.BackFillRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def progressReminder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/progressReminder',
            TaskSchedulerApi__pb2.UserActionRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getInstanceRelation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/getInstanceRelation',
            TaskSchedulerApi__pb2.DataRelationRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pauseTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/pauseTask',
            TaskSchedulerApi__pb2.PausedParamRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLast7Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/getLast7Status',
            TaskSchedulerApi__pb2.Last7StatusRquest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/updateTask',
            TaskSchedulerApi__pb2.UpdateParamRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PageListInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/PageListInfo',
            TaskSchedulerApi__pb2.PageListInfoRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateAndExec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/updateAndExec',
            TaskSchedulerApi__pb2.UpdateAndExecRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fastBackfill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/fastBackfill',
            TaskSchedulerApi__pb2.fastBackfillRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def batchClear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/batchClear',
            TaskSchedulerApi__pb2.BatchHandleRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def batchSetSuccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/batchSetSuccess',
            TaskSchedulerApi__pb2.BatchHandleRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def batchSetFailed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskSchedulerRpcApi/batchSetFailed',
            TaskSchedulerApi__pb2.BatchHandleRequest.SerializeToString,
            TaskSchedulerApi__pb2.TaskCommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
