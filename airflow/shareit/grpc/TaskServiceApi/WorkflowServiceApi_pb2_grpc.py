# -*- coding: utf-8 -*-
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import WorkflowServiceApi_pb2 as WorkflowServiceApi__pb2
from entity import CommonResponse_pb2 as entity_dot_CommonResponse__pb2


class WorkflowRpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.online = channel.unary_unary(
                '/WorkflowRpcService/online',
                request_serializer=WorkflowServiceApi__pb2.OnlineRequest.SerializeToString,
                response_deserializer=entity_dot_CommonResponse__pb2.CommonResponse.FromString,
                )
        self.offline = channel.unary_unary(
                '/WorkflowRpcService/offline',
                request_serializer=WorkflowServiceApi__pb2.OfflineRequest.SerializeToString,
                response_deserializer=entity_dot_CommonResponse__pb2.CommonResponse.FromString,
                )
        self.debugTask = channel.unary_unary(
                '/WorkflowRpcService/debugTask',
                request_serializer=WorkflowServiceApi__pb2.DebugTaskRequest.SerializeToString,
                response_deserializer=entity_dot_CommonResponse__pb2.CommonResponse.FromString,
                )
        self.deleteWorkflow = channel.unary_unary(
                '/WorkflowRpcService/deleteWorkflow',
                request_serializer=WorkflowServiceApi__pb2.DeleteWorkflowRequest.SerializeToString,
                response_deserializer=entity_dot_CommonResponse__pb2.CommonResponse.FromString,
                )
        self.stopTask = channel.unary_unary(
                '/WorkflowRpcService/stopTask',
                request_serializer=WorkflowServiceApi__pb2.StopTaskRequest.SerializeToString,
                response_deserializer=entity_dot_CommonResponse__pb2.CommonResponse.FromString,
                )


class WorkflowRpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def online(self, request, context):
        """工作流上线
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def offline(self, request, context):
        """工作流下线
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def debugTask(self, request, context):
        """调试任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteWorkflow(self, request, context):
        """删除工作流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopTask(self, request, context):
        """关闭调试任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkflowRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'online': grpc.unary_unary_rpc_method_handler(
                    servicer.online,
                    request_deserializer=WorkflowServiceApi__pb2.OnlineRequest.FromString,
                    response_serializer=entity_dot_CommonResponse__pb2.CommonResponse.SerializeToString,
            ),
            'offline': grpc.unary_unary_rpc_method_handler(
                    servicer.offline,
                    request_deserializer=WorkflowServiceApi__pb2.OfflineRequest.FromString,
                    response_serializer=entity_dot_CommonResponse__pb2.CommonResponse.SerializeToString,
            ),
            'debugTask': grpc.unary_unary_rpc_method_handler(
                    servicer.debugTask,
                    request_deserializer=WorkflowServiceApi__pb2.DebugTaskRequest.FromString,
                    response_serializer=entity_dot_CommonResponse__pb2.CommonResponse.SerializeToString,
            ),
            'deleteWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteWorkflow,
                    request_deserializer=WorkflowServiceApi__pb2.DeleteWorkflowRequest.FromString,
                    response_serializer=entity_dot_CommonResponse__pb2.CommonResponse.SerializeToString,
            ),
            'stopTask': grpc.unary_unary_rpc_method_handler(
                    servicer.stopTask,
                    request_deserializer=WorkflowServiceApi__pb2.StopTaskRequest.FromString,
                    response_serializer=entity_dot_CommonResponse__pb2.CommonResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WorkflowRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkflowRpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def online(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkflowRpcService/online',
            WorkflowServiceApi__pb2.OnlineRequest.SerializeToString,
            entity_dot_CommonResponse__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def offline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkflowRpcService/offline',
            WorkflowServiceApi__pb2.OfflineRequest.SerializeToString,
            entity_dot_CommonResponse__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def debugTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkflowRpcService/debugTask',
            WorkflowServiceApi__pb2.DebugTaskRequest.SerializeToString,
            entity_dot_CommonResponse__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkflowRpcService/deleteWorkflow',
            WorkflowServiceApi__pb2.DeleteWorkflowRequest.SerializeToString,
            entity_dot_CommonResponse__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkflowRpcService/stopTask',
            WorkflowServiceApi__pb2.StopTaskRequest.SerializeToString,
            entity_dot_CommonResponse__pb2.CommonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
