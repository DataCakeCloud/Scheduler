# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-configmap
data:
  # yamllint disable rule:line-length
  airflow.cfg: |
    [core]
    dags_folder = /work/airflow/dags

    base_log_folder = /work/airflow/logs

    remote_logging = True
    remote_log_conn_id = MyS3Conn
    remote_base_log_folder = s3://shareit.bigdata.logs.us-east-1/BDP/BDP-airflow/prod
    encrypt_s3_logs = False
    s3_region = us-east-1

    logging_level = INFO
    fab_logging_level = WARN

    logging_config_class =

    colored_console_log = False
    colored_log_format = [%%(blue)s%%(asctime)s%%(reset)s] {{%%(blue)s%%(filename)s:%%(reset)s%%(lineno)d}} %%(log_color)s%%(levelname)s%%(reset)s - %%(log_color)s%%(message)s%%(reset)s
    colored_formatter_class = airflow.utils.log.colored_log.CustomTTYColoredFormatter

    log_format = [%%(asctime)s] {{%%(filename)s:%%(lineno)d}} %%(levelname)s - %%(message)s
    simple_log_format = %%(asctime)s %%(levelname)s - %%(message)s

    log_filename_template = {{ ti.dag_id }}/{{ ti.task_id }}/{{ ts }}/{{ try_number }}.log
    log_processor_filename_template = {{ filename }}.log
    dag_processor_manager_log_location = /work/airflow/logs/dag_processor_manager/dag_processor_manager.log

    hostname_callable = socket:getfqdn

    default_timezone = utc

    executor = KubernetesExecutor

    sql_alchemy_conn = $SQL_ALCHEMY_CONN
    sql_engine_encoding = utf-8
    sql_alchemy_pool_enabled = True
    sql_alchemy_pool_size = 8
    sql_alchemy_max_overflow = 10
    sql_alchemy_pool_recycle = 1800
    sql_alchemy_pool_pre_ping = True
    sql_alchemy_reconnect_timeout = 300
    sql_alchemy_schema =

    parallelism = 1024

    dag_concurrency = 16

    dags_are_paused_at_creation = True

    max_active_runs_per_dag = 10

    load_examples = False

    plugins_folder = /work/airflow/plugins

    fernet_key = 8IhsAr87Yg_8RRuX_RCT-RLmVBZ88C2Gp5Ji7sy0mjw=

    donot_pickle = False

    dagbag_import_timeout = 60

    dag_file_processor_timeout = 350

    task_runner = BashTaskRunner

    default_impersonation =

    security =

    secure_mode = False

    unit_test_mode = False

    task_log_reader = task

    enable_xcom_pickling = True

    killed_task_cleanup_time = 60

    dag_run_conf_overrides_params = False

    worker_precheck = False

    dag_discovery_safe_mode = True

    default_task_retries = 0

    store_serialized_dags = True
    min_serialized_dag_update_interval = 30
    store_dag_code = %(store_serialized_dags)s
    max_num_rendered_ti_fields_per_task = 30

    [cli]
    endpoint_url = http://localhost:8080

    [api]
    auth_backend = airflow.api.auth.backend.default

    [lineage]
    # what lineage backend to use
    backend = airflow.lineage.backend.atlas.AtlasBackend

    [atlas]
    sasl_enabled = False
    host = 172.33.20.240
    port = 41000
    username = admin
    password = atlas-admin-123

    [operators]
    # The default owner assigned to each new operator, unless
    # provided explicitly or passed via `default_args`
    default_owner = airflow
    default_cpus = 1
    default_ram = 512
    default_disk = 512
    default_gpus = 0

    [hive]
    # Default mapreduce queue for HiveOperator tasks
    default_hive_mapred_queue =

    [webserver]
    base_url = https://workflow.ushareit.org

    web_server_host = 0.0.0.0

    web_server_port = 8080

    web_server_ssl_cert =
    web_server_ssl_key =

    web_server_master_timeout = 120

    web_server_worker_timeout = 120

    worker_refresh_batch_size = 2

    worker_refresh_interval = 30

    secret_key = temporary_key

    workers = 6

    worker_class = sync

    access_logfile = /work/airflow/logs/webserver_ac.log
    error_logfile = /work/airflow/logs/webserver_er.log

    expose_config = False

    authenticate = False

    filter_by_owner = False

    owner_mode = user

    dag_default_view = tree

    dag_orientation = LR

    demo_mode = False

    log_fetch_timeout_sec = 5

    hide_paused_dags_by_default = False

    page_size = 100

    rbac = True

    navbar_color = #007A87

    default_dag_run_display_number = 25

    enable_proxy_fix = False

    cookie_secure = False

    cookie_samesite =

    default_wrap = False

    update_fab_perms = True


    [email]
    # airflow.utils.email.send_email_smtp
    email_backend = airflow.utils.email.send_mail_by_notifyAPI
    token_url = https://sentry.ushareit.me/dex/token
    alert_url = http://prod.openapi-notify.sgt.sg2.api/notify/email/send
    username = F6225F9BF9B84CE89944CD74CBD9827D
    password = 8A34B9F1653D84F2BF3BD69E19CF2D8D


    [smtp]
    smtp_host = smtp.exmail.qq.com
    smtp_starttls = False
    smtp_ssl = True
    smtp_user = noreply@ushareit.com
    smtp_password = MAhEH7UCHS35fjzw
    smtp_port = 465
    smtp_mail_from = airflow-k8s-prod<noreply@ushareit.com>
    smtp_mime_from = BDP-workflow

    [sentry]
    # Sentry (https://docs.sentry.io) integration
    sentry_dsn =


    [celery]
    # This section only applies if you are using the CeleryExecutor in
    # [core] section above

    # The app name that will be used by celery
    celery_app_name = airflow.executors.celery_executor

    # The concurrency that will be used when starting workers with the
    # "airflow worker" command. This defines the number of task instances that
    # a worker will take, so size up your workers based on the resources on
    # your worker box and the nature of your tasks
    worker_concurrency = 16

    # The maximum and minimum concurrency that will be used when starting workers with the
    # "airflow worker" command (always keep minimum processes, but grow to maximum if necessary).
    # Note the value should be "max_concurrency,min_concurrency"
    # Pick these numbers based on resources on worker box and the nature of the task.
    # If autoscale option is available, worker_concurrency will be ignored.
    # http://docs.celeryproject.org/en/latest/reference/celery.bin.worker.html#cmdoption-celery-worker-autoscale
    # worker_autoscale = 16,12

    # When you start an airflow worker, airflow starts a tiny web server
    # subprocess to serve the workers local log files to the airflow main
    # web server, who then builds pages and sends them to users. This defines
    # the port on which the logs are served. It needs to be unused, and open
    # visible from the main web server to connect into the workers.
    worker_log_server_port = 8793

    # The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
    # a sqlalchemy database. Refer to the Celery documentation for more
    # information.
    # http://docs.celeryproject.org/en/latest/userguide/configuration.html#broker-settings
    broker_url = sqla+mysql://airflow:airflow@localhost:3306/airflow

    # The Celery result_backend. When a job finishes, it needs to update the
    # metadata of the job. Therefore it will post a message on a message bus,
    # or insert it into a database (depending of the backend)
    # This status is used by the scheduler to update the state of the task
    # The use of a database is highly recommended
    # http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-result-backend-settings
    result_backend = db+mysql://airflow:airflow@localhost:3306/airflow

    # Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start
    # it `airflow flower`. This defines the IP that Celery Flower runs on
    flower_host = 0.0.0.0

    # The root URL for Flower
    # Ex: flower_url_prefix = /flower
    flower_url_prefix =

    # This defines the port that Celery Flower runs on
    flower_port = 5555

    # Securing Flower with Basic Authentication
    # Accepts user:password pairs separated by a comma
    # Example: flower_basic_auth = user1:password1,user2:password2
    flower_basic_auth =

    # Default queue that tasks get assigned to and that worker listen on.
    default_queue = default

    # How many processes CeleryExecutor uses to sync task state.
    # 0 means to use max(1, number of cores - 1) processes.
    sync_parallelism = 0

    # Import path for celery configuration options
    celery_config_options = airflow.config_templates.default_celery.DEFAULT_CELERY_CONFIG

    # In case of using SSL
    ssl_active = False
    ssl_key =
    ssl_cert =
    ssl_cacert =

    # Celery Pool implementation.
    # Choices include: prefork (default), eventlet, gevent or solo.
    # See:
    #   https://docs.celeryproject.org/en/latest/userguide/workers.html#concurrency
    #   https://docs.celeryproject.org/en/latest/userguide/concurrency/eventlet.html
    pool = prefork

    [celery_broker_transport_options]
    # This section is for specifying options which can be passed to the
    # underlying celery broker transport.  See:
    # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-broker_transport_options

    # The visibility timeout defines the number of seconds to wait for the worker
    # to acknowledge the task before the message is redelivered to another worker.
    # Make sure to increase the visibility timeout to match the time of the longest
    # ETA you're planning to use.
    #
    # visibility_timeout is only supported for Redis and SQS celery brokers.
    # See:
    #   http://docs.celeryproject.org/en/master/userguide/configuration.html#std:setting-broker_transport_options
    #
    #visibility_timeout = 21600

    [dask]
    # This section only applies if you are using the DaskExecutor in
    # [core] section above

    # The IP address and port of the Dask cluster's scheduler.
    cluster_address = 127.0.0.1:8786
    # TLS/ SSL settings to access a secured Dask scheduler.
    tls_ca =
    tls_cert =
    tls_key =


    [scheduler]
    # Task instances listen for external kill signal (when you clear tasks
    # from the CLI or the UI), this defines the frequency at which they should
    # listen (in seconds).
    job_heartbeat_sec = 5

    # The scheduler constantly tries to trigger new tasks (look at the
    # scheduler section in the docs for more information). This defines
    # how often the scheduler should run (in seconds).
    scheduler_heartbeat_sec = 10

    # after how much time should the scheduler terminate in seconds
    # -1 indicates to run continuously (see also num_runs)
    run_duration = 43200

    # The number of times to try to schedule each DAG file
    # -1 indicates unlimited number
    num_runs = -1

    # The number of seconds to wait between consecutive DAG file processing
    processor_poll_interval = 1

    # after how much time (seconds) a new DAGs should be picked up from the filesystem
    min_file_process_interval = 10

    # How often (in seconds) to scan the DAGs directory for new files. Default to 5 minutes.
    dag_dir_list_interval = 300

    # How often should stats be printed to the logs
    print_stats_interval = 60

    # If the last scheduler heartbeat happened more than scheduler_health_check_threshold ago (in seconds),
    # scheduler is considered unhealthy.
    # This is used by the health check in the "/health" endpoint
    scheduler_health_check_threshold = 300

    child_process_log_directory = /work/airflow/logs/scheduler

    # Local task jobs periodically heartbeat to the DB. If the job has
    # not heartbeat in this many seconds, the scheduler will mark the
    # associated task instance as failed and will re-schedule the task.
    scheduler_zombie_task_threshold = 300

    # Turn off scheduler catchup by setting this to False.
    # Default behavior is unchanged and
    # Command Line Backfills still work, but the scheduler
    # will not do scheduler catchup if this is False,
    # however it can be set on a per DAG basis in the
    # DAG definition (catchup)
    catchup_by_default = True

    # This changes the batch size of queries in the scheduling main loop.
    # If this is too high, SQL query performance may be impacted by one
    # or more of the following:
    #  - reversion to full table scan
    #  - complexity of query predicate
    #  - excessive locking
    #
    # Additionally, you may hit the maximum allowable query length for your db.
    #
    # Set this to 0 for no limit (not advised)
    max_tis_per_query = 512

    # Statsd (https://github.com/etsy/statsd) integration settings
    statsd_on = False
    statsd_host = localhost
    statsd_port = 8125
    statsd_prefix = airflow

    # If you want to avoid send all the available metrics to StatsD,
    # you can configure an allow list of prefixes to send only the metrics that
    # start with the elements of the list (e.g: scheduler,executor,dagrun)
    statsd_allow_list =

    # The scheduler can run multiple threads in parallel to schedule dags.
    # This defines how many threads will run.
    max_threads = 24

    authenticate = False

    # Turn off scheduler use of cron intervals by setting this to False.
    # DAGs submitted manually in the web UI or with trigger_dag will still run.
    use_job_schedule = True

    [ldap]
    uri =
    user_filter = objectClass=*
    user_name_attr = uid
    group_member_attr = memberOf
    superuser_filter =
    data_profiler_filter =
    bind_user = cn=Manager,dc=example,dc=com
    bind_password = insecure
    basedn = dc=example,dc=com
    cacert = /etc/ca/ldap_ca.crt
    search_scope = LEVEL

    ignore_malformed_schema = False

    [mesos]
    # Mesos master address which MesosExecutor will connect to.
    master = localhost:5050

    # The framework name which Airflow scheduler will register itself as on mesos
    framework_name = Airflow

    # Number of cpu cores required for running one task instance using
    # 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
    # command on a mesos slave
    task_cpu = 1

    # Memory in MB required for running one task instance using
    # 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
    # command on a mesos slave
    task_memory = 256

    # Enable framework checkpointing for mesos
    # See http://mesos.apache.org/documentation/latest/slave-recovery/
    checkpoint = False

    # Failover timeout in milliseconds.
    # When checkpointing is enabled and this option is set, Mesos waits
    # until the configured timeout for
    # the MesosExecutor framework to re-register after a failover. Mesos
    # shuts down running tasks if the
    # MesosExecutor framework fails to re-register within this timeframe.
    # failover_timeout = 604800

    # Enable framework authentication for mesos
    # See http://mesos.apache.org/documentation/latest/configuration/
    authenticate = False

    # Mesos credentials, if authentication is enabled
    # default_principal = admin
    # default_secret = admin

    # Optional Docker Image to run on slave before running the command
    # This image should be accessible from mesos slave i.e mesos slave
    # should be able to pull this docker image before executing the command.
    # docker_image_slave = puckel/docker-airflow

    [kerberos]
    ccache = /tmp/airflow_krb5_ccache
    # gets augmented with fqdn
    principal = airflow
    reinit_frequency = 3600
    kinit_path = kinit
    keytab = airflow.keytab


    [github_enterprise]
    api_rev = v3

    [admin]
    # UI to hide sensitive variable fields when set to True
    hide_sensitive_variable_fields = True

    [elasticsearch]
    # Elasticsearch host
    host =
    # Format of the log_id, which is used to query for a given tasks logs
    log_id_template = {{dag_id}}-{{task_id}}-{{execution_date}}-{{try_number}}
    # Used to mark the end of a log stream for a task
    end_of_log_mark = end_of_log
    # Qualified URL for an elasticsearch frontend (like Kibana) with a template argument for log_id
    # Code will construct log_id using the log_id template from the argument above.
    # NOTE: The code will prefix the https:// automatically, don't include that here.
    frontend =
    # Write the task logs to the stdout of the worker, rather than the default files
    write_stdout = False
    # Instead of the default log formatter, write the log lines as JSON
    json_format = False
    # Log fields to also attach to the json output, if enabled
    json_fields = asctime, filename, lineno, levelname, message

    [elasticsearch_configs]
    use_ssl = False
    verify_certs = True

    [kubernetes]
    worker_container_repository = 848318613114.dkr.ecr.us-east-1.amazonaws.com/shareit-bdp/airflow-business
    # worker_container_repository = 848318613114.dkr.ecr.us-east-1.amazonaws.com/shareit-bdp/airflow-environment
    worker_container_tag = 1.10.10_prod_16
    # worker_container_tag = 1.10.10stable_prod_5
    worker_container_image_pull_policy = IfNotPresent

    delete_worker_pods = True
    worker_pods_creation_batch_size = 256

    # Default resource in container
    default_request_cpu = 0.15
    default_request_memory = 500Mi
    default_limit_cpu = 0.15
    default_limit_memory = 500Mi
    default_limit_gpu =

    volumes = [{"name": "workflow-configmap","configMap": {"name": "workflow-configmap"}}]
    volume_mounts = [{"name": "workflow-configmap","mountPath": "/work/airflow/conf/workflow.cfg","subPath": "workflow.cfg"}]
    namespace = bdp-airflow

    airflow_configmap = airflow-configmap

    dags_in_image = False

    dags_volume_subpath =

    dags_volume_claim =airflow-dags

    logs_volume_subpath =
    logs_volume_claim = airflow-logs
    dags_volume_host =

    logs_volume_host =

    env_from_configmap_ref =

    env_from_secret_ref =

    git_repo =
    git_branch =
    git_subpath =
    git_sync_rev =

    git_user =
    git_password =
    git_sync_root = /git
    git_sync_dest = repo

    git_dags_folder_mount_point =

    git_ssh_key_secret_name =
    git_ssh_known_hosts_configmap_name =

    git_sync_credentials_secret =

    git_sync_container_repository = k8s.gcr.io/git-sync
    git_sync_container_tag = v3.1.1
    git_sync_init_container_name = git-sync-clone
    git_sync_run_as_user = 65533

    worker_service_account_name = airflow-sa

    image_pull_secrets =
    gcp_service_account_keys =
    in_cluster = True

    affinity =

    tolerations =[{"key": "usage","operator": "Equal","value": "airflow","effect": "NoExecute"}]

    run_as_user =
    fs_group =

    [kubernetes_node_selectors]
    usage=airflow

    [kubernetes_annotations]

    [kubernetes_environment_variables]

    [kubernetes_secrets]
    SQL_ALCHEMY_CONN = airflow-secrets=sql_alchemy_conn

    [kubernetes_labels]

    [cloud_manager_platform]
    # SCMP url
    cmp_url = http://alert-adapter.ushareit.me/alert-adapter/common

    [dag_creation_manager]
    # DEFAULT: basis
    dag_creation_manager_line_interpolate = basis
    # Choices for queue and pool
    dag_creation_manager_queue_pool = mydefault:mydefault|mydefault
    # MR queue for queue pool
    dag_creation_manager_queue_pool_mr_queue = mydefault:mydefault
    # Category for display
    dag_creation_manager_category = custom
    # Task category for display
    dag_creation_manager_task_category = custom_task:#ffba40
    # Your email address to receive email
    # DEFAULT:
    dag_creation_manager_default_email = test@ushareit.com
    dag_creation_manager_need_approver = True
    dag_creation_manager_can_approve_self = True
    dag_creation_manager_dag_templates_dir = /work/airflow/plugins/onlineEditing/dag_templates
