# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-configmap
data:
  # yamllint disable rule:line-length
  airflow.cfg: |
    [core]
    airflow_home = /work/airflow
    dags_folder = /work/airflow/dags
    base_log_folder = /work/airflow/logs
    plugins_folder = /work/airflow/plugins

    logging_level = INFO
    fab_logging_level = WARN
    logging_config_class =
    log_format = [%%(asctime)s] {%%(filename)s:%%(lineno)d} %%(levelname)s - %%(message)s
    simple_log_format = %%(asctime)s %%(levelname)s - %%(message)s
    log_filename_template = {{ ti.dag_id }}/{{ ti.task_id }}/{{ ts }}/{{ try_number }}.log
    log_processor_filename_template = {{ filename }}.log

    executor = KubernetesExecutor
    parallelism = 128
    dag_concurrency = 8
    dags_are_paused_at_creation = True
    non_pooled_task_slot_count = 16
    max_active_runs_per_dag = 5
    dagbag_import_timeout = 30

    load_examples = False

    sql_alchemy_conn = $SQL_ALCHEMY_CONN
    sql_alchemy_pool_enabled = True
    sql_alchemy_pool_size = 8
    sql_alchemy_pool_recycle = 1800
    sql_alchemy_reconnect_timeout = 300

    remote_logging = True
    remote_log_conn_id = MyS3Conn
    remote_base_log_folder = s3://shareit.bigdata.logs.us-east-1/BDP/BDP-airflow/test
    encrypt_s3_logs = True
    s3_region = us-east-1

    hostname_callable = socket:getfqdn
    default_timezone = utc
    fernet_key = 8IhsAr87Yg_8RRuX_RCT-RLmVBZ88C2Gp5Ji7sy0mjw=
    donot_pickle = False
    task_runner = BashTaskRunner
    default_impersonation =
    security =
    secure_mode = False
    unit_test_mode = False
    task_log_reader = task
    enable_xcom_pickling = True
    killed_task_cleanup_time = 60
    dag_run_conf_overrides_params = False
    
    store_serialized_dags = True
    min_serialized_dag_update_interval = 30
    store_dag_code = %(store_serialized_dags)s
    max_num_rendered_ti_fields_per_task = 30
    
    [scheduler]
    dag_dir_list_interval = 300
    child_process_log_directory = /work/airflow/logs/scheduler
    # Task instances listen for external kill signal (when you clear tasks
    # from the CLI or the UI), this defines the frequency at which they should
    # listen (in seconds).
    job_heartbeat_sec = 5
    max_threads = 8

    # The scheduler constantly tries to trigger new tasks (look at the
    # scheduler section in the docs for more information). This defines
    # how often the scheduler should run (in seconds).
    scheduler_heartbeat_sec = 5

    # after how much time should the scheduler terminate in seconds
    # -1 indicates to run continuously (see also num_runs)
    run_duration = 43200

    # after how much time a new DAGs should be picked up from the filesystem
    min_file_process_interval = 0

    statsd_on = False
    statsd_host = localhost
    statsd_port = 8125
    statsd_prefix = airflow

    # How many seconds to wait between file-parsing loops to prevent the logs from being spammed.
    min_file_parsing_loop_time = 1

    print_stats_interval = 30
    scheduler_zombie_task_threshold = 300
    max_tis_per_query = 0
    authenticate = False

    # Turn off scheduler catchup by setting this to False.
    # Default behavior is unchanged and
    # Command Line Backfills still work, but the scheduler
    # will not do scheduler catchup if this is False,
    # however it can be set on a per DAG basis in the
    # DAG definition (catchup)
    catchup_by_default = True

    [webserver]
    # The base url of your website as airflow cannot guess what domain or
    # cname you are using. This is used in automated emails that
    # airflow sends to point links to the right web server
    base_url = http://localhost:8080

    # The ip specified when starting the web server
    web_server_host = 0.0.0.0

    # The port on which to run the web server
    web_server_port = 8080

    # Paths to the SSL certificate and key for the web server. When both are
    # provided SSL will be enabled. This does not change the web server port.
    web_server_ssl_cert =
    web_server_ssl_key =

    # Number of seconds the webserver waits before killing gunicorn master that doesn't respond
    web_server_master_timeout = 120

    # Number of seconds the gunicorn webserver waits before timing out on a worker
    web_server_worker_timeout = 120

    # Number of workers to refresh at a time. When set to 0, worker refresh is
    # disabled. When nonzero, airflow periodically refreshes webserver workers by
    # bringing up new ones and killing old ones.
    worker_refresh_batch_size = 1

    # Number of seconds to wait before refreshing a batch of workers.
    worker_refresh_interval = 30

    # Secret key used to run your flask app
    secret_key = temporary_key

    # Number of workers to run the Gunicorn web server
    workers = 4

    # The worker class gunicorn should use. Choices include
    # sync (default), eventlet, gevent
    worker_class = sync

    # Log files for the gunicorn webserver. '-' means log to stderr.
    access_logfile = /work/airflow/logs/webserver_ac.log
    error_logfile = /work/airflow/logs/webserver_er.log

    # Expose the configuration file in the web server
    expose_config = False

    # Set to true to turn on authentication:
    # https://airflow.apache.org/security.html#web-authentication
    authenticate = False

    # Filter the list of dags by owner name (requires authentication to be enabled)
    filter_by_owner = False

    # Filtering mode. Choices include user (default) and ldapgroup.
    # Ldap group filtering requires using the ldap backend
    #
    # Note that the ldap server needs the "memberOf" overlay to be set up
    # in order to user the ldapgroup mode.
    owner_mode = user

    # Default DAG view.  Valid values are:
    # tree, graph, duration, gantt, landing_times
    dag_default_view = tree

    # Default DAG orientation. Valid values are:
    # LR (Left->Right), TB (Top->Bottom), RL (Right->Left), BT (Bottom->Top)
    dag_orientation = LR

    # Puts the webserver in demonstration mode; blurs the names of Operators for
    # privacy.
    demo_mode = False

    # The amount of time (in secs) webserver will wait for initial handshake
    # while fetching logs from other worker machine
    log_fetch_timeout_sec = 5

    # By default, the webserver shows paused DAGs. Flip this to hide paused
    # DAGs by default
    hide_paused_dags_by_default = False

    # Consistent page size across all listing views in the UI
    page_size = 100

    # Use FAB-based webserver with RBAC feature
    rbac = True
    navbar_color = #007A87
    [smtp]
    # If you want airflow to send emails on retries, failure, and you want to use
    # the airflow.utils.email.send_email_smtp function, you have to configure an
    # smtp server here
    smtp_host = smtp.exmail.qq.com
    smtp_starttls = False
    smtp_ssl = True
    # Uncomment and set the user/pass settings if you want to use SMTP AUTH
    smtp_user = noreply@ushareit.com
    smtp_password = MAhEH7UCHS35fjzw
    smtp_port = 465
    smtp_mail_from = airflow-k8s-test<noreply@ushareit.com>
    smtp_mime_from = BDP-workflow

    [kubernetes]
    # The repository, tag and imagePullPolicy of the Kubernetes Image for the Worker to Run
    worker_container_repository = 848318613114.dkr.ecr.us-east-1.amazonaws.com/shareit-bdp/airflow-business
    worker_container_tag = 1.10.10_test_40
    # worker_container_tag = 1.10.10fix_lock_wait_test
    # 1.10.7rc1_centos_k8s_etl_3
    worker_container_image_pull_policy = IfNotPresent

    # If True (default), worker pods will be deleted upon termination
    delete_worker_pods = True

    # Number of Kubernetes Worker Pod creation calls per scheduler loop
    worker_pods_creation_batch_size = 10
   
    # Default resource in container
    default_request_cpu = 0.25
    default_request_memory = 500Mi
    default_limit_cpu = 0.25
    default_limit_memory = 500Mi
    default_limit_gpu =

    volumes = [{"name": "workflow-configmap","configMap": {"name": "workflow-configmap"}}]
    volume_mounts = [{"name": "workflow-configmap","mountPath": "/work/airflow/conf/workflow.cfg","subPath": "workflow.cfg"}]
    # The Kubernetes namespace where airflow workers should be created. Defaults to `default`
    namespace = bdp-airflow

    # The name of the Kubernetes ConfigMap Containing the Airflow Configuration (this file)
    airflow_configmap = airflow-configmap

    # For docker image already contains DAGs, this is set to `True`, and the worker will search for dags in dags_folder,
    # otherwise use git sync or dags volume claim to mount DAGs
    dags_in_image = False

    # For either git sync or volume mounted DAGs, the worker will look in this subpath for DAGs
    dags_volume_subpath =

    # For DAGs mounted via a volume claim (mutually exclusive with git-sync and host path)
    dags_volume_claim =airflow-dags

    # For volume mounted logs, the worker will look in this subpath for logs
    logs_volume_subpath =

    # A shared volume claim for the logs
    logs_volume_claim = airflow-logs

    # For DAGs mounted via a hostPath volume (mutually exclusive with volume claim and git-sync)
    # Useful in local environment, discouraged in production
    dags_volume_host =

    # A hostPath volume for the logs
    # Useful in local environment, discouraged in production
    logs_volume_host =

    # A list of configMapsRefs to envFrom. If more than one configMap is
    # specified, provide a comma separated list: configmap_a,configmap_b
    env_from_configmap_ref =

    # A list of secretRefs to envFrom. If more than one secret is
    # specified, provide a comma separated list: secret_a,secret_b
    env_from_secret_ref =

    # Git credentials and repository for DAGs mounted via Git (mutually exclusive with volume claim)
    git_repo =
    git_branch =
    git_subpath =

    # The specific rev or hash the git_sync init container will checkout
    # This becomes GIT_SYNC_REV environment variable in the git_sync init container for worker pods
    git_sync_rev =

    # Use git_user and git_password for user authentication or git_ssh_key_secret_name and git_ssh_key_secret_key
    # for SSH authentication
    git_user =
    git_password =
    git_sync_root = /git
    git_sync_dest = repo
    # Mount point of the volume if git-sync is being used.
    # i.e. {AIRFLOW_HOME}/dags
    git_dags_folder_mount_point =

    # To get Git-sync SSH authentication set up follow this format
    #
    # airflow-secrets.yaml:
    # ---
    # apiVersion: v1
    # kind: Secret
    # metadata:
    #   name: airflow-secrets
    # data:
    #   # key needs to be gitSshKey
    #   gitSshKey: <base64_encoded_data>
    # ---
    # airflow-configmap.yaml:
    # apiVersion: v1
    # kind: ConfigMap
    # metadata:
    #   name: airflow-configmap
    # data:
    #   known_hosts: |
    #       github.com ssh-rsa <...>
    #   airflow.cfg: |
    #       ...
    #
    # git_ssh_key_secret_name = airflow-secrets
    # git_ssh_known_hosts_configmap_name = airflow-configmap
    git_ssh_key_secret_name =
    git_ssh_known_hosts_configmap_name =

    # To give the git_sync init container credentials via a secret, create a secret
    # with two fields: GIT_SYNC_USERNAME and GIT_SYNC_PASSWORD (example below) and
    # add `git_sync_credentials_secret = <secret_name>` to your airflow config under the kubernetes section
    #
    # Secret Example:
    # apiVersion: v1
    # kind: Secret
    # metadata:
    #   name: git-credentials
    # data:
    #   GIT_SYNC_USERNAME: <base64_encoded_git_username>
    #   GIT_SYNC_PASSWORD: <base64_encoded_git_password>
    git_sync_credentials_secret =

    # For cloning DAGs from git repositories into volumes: https://github.com/kubernetes/git-sync
    git_sync_container_repository = k8s.gcr.io/git-sync
    git_sync_container_tag = v3.1.1
    git_sync_init_container_name = git-sync-clone
    git_sync_run_as_user = 65533

    # The name of the Kubernetes service account to be associated with airflow workers, if any.
    # Service accounts are required for workers that require access to secrets or cluster resources.
    # See the Kubernetes RBAC documentation for more:
    #   https://kubernetes.io/docs/admin/authorization/rbac/
    worker_service_account_name = airflow-sa

    # Any image pull secrets to be given to worker pods, If more than one secret is
    # required, provide a comma separated list: secret_a,secret_b
    image_pull_secrets =

    # GCP Service Account Keys to be provided to tasks run on Kubernetes Executors
    # Should be supplied in the format: key-name-1:key-path-1,key-name-2:key-path-2
    gcp_service_account_keys =

    # Use the service account kubernetes gives to pods to connect to kubernetes cluster.
    # It's intended for clients that expect to be running inside a pod running on kubernetes.
    # It will raise an exception if called from a process not running in a kubernetes environment.
    in_cluster = True

    # When running with in_cluster=False change the default cluster_context or config_file
    # options to Kubernetes client. Leave blank these to use default behaviour like `kubectl` has.
    # cluster_context =
    # config_file =


    # Affinity configuration as a single line formatted JSON object.
    # See the affinity model for top-level key names (e.g. `nodeAffinity`, etc.):
    #   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#affinity-v1-core
    affinity =

    # A list of toleration objects as a single line formatted JSON array
    # See:
    #   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#toleration-v1-core
    tolerations =[{"key": "usage","operator": "Equal","value": "airflow","effect": "NoExecute"}]

    # **kwargs parameters to pass while calling a kubernetes client core_v1_api methods from Kubernetes Executor
    # provided as a single line formatted JSON dictionary string.
    # List of supported params in **kwargs are similar for all core_v1_apis, hence a single config variable for all apis
    # See:
    #   https://raw.githubusercontent.com/kubernetes-client/python/master/kubernetes/client/apis/core_v1_api.py
    # Note that if no _request_timeout is specified, the kubernetes client will wait indefinitely for kubernetes
    # api responses, which will cause the scheduler to hang. The timeout is specified as [connect timeout, read timeout]
    # kube_client_request_args = {{"_request_timeout" : [60,60] }}

    # Worker pods security context options
    # See:
    #   https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

    # Specifies the uid to run the first process of the worker pods containers as
    run_as_user =

    # Specifies a gid to associate with all containers in the worker pods
    # if using a git_ssh_key_secret_name use an fs_group
    # that allows for the key to be read, e.g. 65533
    fs_group =

    [kubernetes_node_selectors]
    # The Key-value pairs to be given to worker pods.
    # The worker pods will be scheduled to the nodes of the specified key-value pairs.
    # Should be supplied in the format: key = value
    usage=airflow

    [kubernetes_annotations]
    # The Key-value annotations pairs to be given to worker pods.
    # Should be supplied in the format: key = value

    [kubernetes_environment_variables]
    # The scheduler sets the following environment variables into your workers. You may define as
    # many environment variables as needed and the kubernetes launcher will set them in the launched workers.
    # Environment variables in this section are defined as follows
    #     <environment_variable_key> = <environment_variable_value>
    #
    # For example if you wanted to set an environment variable with value `prod` and key
    # `ENVIRONMENT` you would follow the following format:
    #     ENVIRONMENT = prod
    #
    # Additionally you may override worker airflow settings with the AIRFLOW__<SECTION>__<KEY>
    # formatting as supported by airflow normally.

    [kubernetes_secrets]
    # The scheduler mounts the following secrets into your workers as they are launched by the
    # scheduler. You may define as many secrets as needed and the kubernetes launcher will parse the
    # defined secrets and mount them as secret environment variables in the launched workers.
    # Secrets in this section are defined as follows
    #     <environment_variable_mount> = <kubernetes_secret_object>=<kubernetes_secret_key>
    #
    # For example if you wanted to mount a kubernetes secret key named `postgres_password` from the
    # kubernetes secret object `airflow-secret` as the environment variable `POSTGRES_PASSWORD` into
    # your workers you would follow the following format:
    #     POSTGRES_PASSWORD = airflow-secret=postgres_credentials
    #
    # Additionally you may override worker airflow settings with the AIRFLOW__<SECTION>__<KEY>
    # formatting as supported by airflow normally.
    SQL_ALCHEMY_CONN = airflow-secrets=sql_alchemy_conn

    [kubernetes_labels]
    # The Key-value pairs to be given to worker pods.
    # The worker pods will be given these static labels, as well as some additional dynamic labels
    # to identify the task.
    # Should be supplied in the format: key = value

    [hive]
    # Default mapreduce queue for HiveOperator tasks
    default_hive_mapred_queue =

    [celery]
    # This section only applies if you are using the CeleryExecutor in
    # [core] section above

    # The app name that will be used by celery
    celery_app_name = airflow.executors.celery_executor

    # The concurrency that will be used when starting workers with the
    # "airflow worker" command. This defines the number of task instances that
    # a worker will take, so size up your workers based on the resources on
    # your worker box and the nature of your tasks
    worker_concurrency = 16

    # When you start an airflow worker, airflow starts a tiny web server
    # subprocess to serve the workers local log files to the airflow main
    # web server, who then builds pages and sends them to users. This defines
    # the port on which the logs are served. It needs to be unused, and open
    # visible from the main web server to connect into the workers.
    worker_log_server_port = 8793

    # The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
    # a sqlalchemy database. Refer to the Celery documentation for more
    # information.
    # http://docs.celeryproject.org/en/latest/userguide/configuration.html#broker-settings
    broker_url = sqla+mysql://airflow:airflow@localhost:3306/airflow

    # The Celery result_backend. When a job finishes, it needs to update the
    # metadata of the job. Therefore it will post a message on a message bus,
    # or insert it into a database (depending of the backend)
    # This status is used by the scheduler to update the state of the task
    # The use of a database is highly recommended
    # http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-result-backend-settings
    result_backend = db+mysql://airflow:airflow@localhost:3306/airflow

    # Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start
    # it `airflow flower`. This defines the IP that Celery Flower runs on
    flower_host = 0.0.0.0

    # The root URL for Flower
    # Ex: flower_url_prefix = /flower
    flower_url_prefix =

    # This defines the port that Celery Flower runs on
    flower_port = 5555

    # Securing Flower with Basic Authentication
    # Accepts user:password pairs separated by a comma
    # Example: flower_basic_auth = user1:password1,user2:password2
    flower_basic_auth =

    # Default queue that tasks get assigned to and that worker listen on.
    default_queue = default

    # How many processes CeleryExecutor uses to sync task state.
    # 0 means to use max(1, number of cores - 1) processes.
    sync_parallelism = 0

    # Import path for celery configuration options
    celery_config_options = airflow.config_templates.default_celery.DEFAULT_CELERY_CONFIG

    [celery_broker_transport_options]
    # The visibility timeout defines the number of seconds to wait for the worker
    # to acknowledge the task before the message is redelivered to another worker.
    # Make sure to increase the visibility timeout to match the time of the longest
    # ETA you're planning to use. Especially important in case of using Redis or SQS
    visibility_timeout = 21600

    # In case of using SSL
    ssl_active = False
    ssl_key =
    ssl_cert =
    ssl_cacert =

    [dask]
    # This section only applies if you are using the DaskExecutor in
    # [core] section above

    # The IP address and port of the Dask cluster's scheduler.
    cluster_address = 127.0.0.1:8786
    # TLS/ SSL settings to access a secured Dask scheduler.
    tls_ca =
    tls_cert =
    tls_key =

    [ldap]
    # set this to ldaps://<your.ldap.server>:<port>
    uri =
    user_filter = objectClass=*
    user_name_attr = uid
    group_member_attr = memberOf
    superuser_filter =
    data_profiler_filter =
    bind_user = cn=Manager,dc=example,dc=com
    bind_password = insecure
    basedn = dc=example,dc=com
    cacert = /etc/ca/ldap_ca.crt
    search_scope = LEVEL

    [mesos]
    # Mesos master address which MesosExecutor will connect to.
    master = localhost:5050

    # The framework name which Airflow scheduler will register itself as on mesos
    framework_name = Airflow

    # Number of cpu cores required for running one task instance using
    # 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
    # command on a mesos slave
    task_cpu = 1

    # Memory in MB required for running one task instance using
    # 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
    # command on a mesos slave
    task_memory = 256

    # Enable framework checkpointing for mesos
    # See http://mesos.apache.org/documentation/latest/slave-recovery/
    checkpoint = False

    # Failover timeout in milliseconds.
    # When checkpointing is enabled and this option is set, Mesos waits
    # until the configured timeout for
    # the MesosExecutor framework to re-register after a failover. Mesos
    # shuts down running tasks if the
    # MesosExecutor framework fails to re-register within this timeframe.
    # failover_timeout = 604800

    # Enable framework authentication for mesos
    # See http://mesos.apache.org/documentation/latest/configuration/
    authenticate = False

    # Mesos credentials, if authentication is enabled
    # default_principal = admin
    # default_secret = admin

    # Optional Docker Image to run on slave before running the command
    # This image should be accessible from mesos slave i.e mesos slave
    # should be able to pull this docker image before executing the command.
    # docker_image_slave = puckel/docker-airflow

    [kerberos]
    ccache = /tmp/airflow_krb5_ccache
    # gets augmented with fqdn
    principal = airflow
    reinit_frequency = 3600
    kinit_path = kinit
    keytab = airflow.keytab

    [cli]
    api_client = airflow.api.client.json_client
    endpoint_url = http://localhost:8080

    [api]
    auth_backend = airflow.api.auth.backend.default

    [github_enterprise]
    api_rev = v3

    [admin]
    # UI to hide sensitive variable fields when set to True
    hide_sensitive_variable_fields = True

    [elasticsearch]
    host =
    # yamllint enable rule:line-length
    [dag_creation_manager]
    # DEFAULT: basis
    dag_creation_manager_line_interpolate = basis
    # Choices for queue and pool
    dag_creation_manager_queue_pool = mydefault:mydefault|mydefault
    # MR queue for queue pool
    dag_creation_manager_queue_pool_mr_queue = mydefault:mydefault
    # Category for display
    dag_creation_manager_category = custom
    # Task category for display
    dag_creation_manager_task_category = custom_task:#ffba40
    # Your email address to receive email
    # DEFAULT:
    dag_creation_manager_default_email = test@ushareit.com
    dag_creation_manager_need_approver = True
    dag_creation_manager_can_approve_self = True
    dag_creation_manager_dag_templates_dir = /work/airflow/plugins/onlineEditing/dag_templates
